"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LevelSelector = function () {
    function LevelSelector(gameData) {
        _classCallCheck(this, LevelSelector);

        this.gameData = gameData;
    }

    _createClass(LevelSelector, [{
        key: "run",
        value: function run() {
            var html = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.entries(this.gameData)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _step$value = _slicedToArray(_step.value, 2),
                        clusterName = _step$value[0],
                        entries = _step$value[1];

                    console.log(entries);
                    //console.log(`${clusterName}: ${entries.length}`);
                    html.push("<div>");
                    html.push("<h2>Cluster &ldquo;" + clusterName + "&rdquo;</h2>");
                    html.push("<ol>");
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                        for (var _iterator2 = entries[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var entry = _step2.value;

                            var cve = entry.id;
                            var param = clusterName + "_" + cve;
                            var limitedOptionCount = entry.limitedOptionCount;
                            var numOptions = entry.numOptions;
                            var link = "<a href=\"game.html?" + param + "\">" + cve + "</a>, " + numOptions + " mutations";
                            html.push("<li>" + link + "</li>");
                        }
                        //const div = `<div>${divContents}</div>`;
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }

                    html.push("</ol>");
                    html.push("</div>");
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var compiledHtml = html.join("\n");
            $("#level-selector").html(compiledHtml);
        }
    }]);

    return LevelSelector;
}();

var LEVEL_SELECTOR = new LevelSelector(GAMEDATA);
LEVEL_SELECTOR.run();