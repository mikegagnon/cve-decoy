"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CveGame = function () {
    function CveGame(gameData, clusterName, cveId) {
        _classCallCheck(this, CveGame);

        //console.log(clusterName, cveId);
        this.clusterName = clusterName;
        this.cveId = cveId;
        this.gameData = gameData;
    }

    _createClass(CveGame, [{
        key: "getEntry",
        value: function getEntry() {
            if (!(this.clusterName in this.gameData)) {
                $("#game").html("Error");
                return false;
            }

            var entries = this.gameData[this.clusterName];
            this.entry = null;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var entry = _step.value;

                    var cveId = entry.id;
                    if (cveId == this.cveId) {
                        this.entry = entry;
                        break;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (this.entry === null) {
                $("#game").html("Error");
                return false;
            }

            return true;
        }
    }, {
        key: "makeTitle",
        value: function makeTitle() {
            var title = this.entry.id;
            var clusterName = this.entry.cluster;
            var html = "<h1>Mutated " + title + "</h1><p>From the &ldquo;" + clusterName + "&rdquo; cluster</p>";
            $("#game").append(html);
        }
    }, {
        key: "makeDropdowns",
        value: function makeDropdowns() {
            var parsed = this.entry.parsed;
            var html = [];
            html.push("<div>");
            html.push("<h2>All the possibilities:</h2>");
            if (this.entry.numOptions == 1) {
                html.push("<p>There is 1 possibility. My algorithm didn't generate any mutations for this CVE.</p>");
            } else {
                html.push("<p>There are " + this.entry.numOptions + " possibilities.</p>");
            }

            html.push("<div class='section'><h2>Dropdown guesser</h2>");
            html.push("<div class='var-header' id='full-guess'></div>");

            html.push("<div class='var-header'>");

            var quote = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = parsed[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var token = _step2.value;

                    if ("key" in token) {
                        if (token.key != "BEGIN_LINE" && token.key != "END_LINE") {
                            quote.push(token.key);
                        }
                    } else if (!("options" in token)) {
                        quote.push(token.swappable);
                    } else {
                        //console.log(token);
                        var options = token.options;
                        quote.push("<select class=\"select-full\" data-varName='" + token.varName + "'>");
                        var _iteratorNormalCompletion3 = true;
                        var _didIteratorError3 = false;
                        var _iteratorError3 = undefined;

                        try {
                            for (var _iterator3 = options[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                var option = _step3.value;

                                quote.push("<option>" + option + "</option>");
                            }
                        } catch (err) {
                            _didIteratorError3 = true;
                            _iteratorError3 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                    _iterator3.return();
                                }
                            } finally {
                                if (_didIteratorError3) {
                                    throw _iteratorError3;
                                }
                            }
                        }

                        quote.push("</select>");
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var quoteCompiled = quote.join(" ");
            html.push("&ldquo;" + quoteCompiled + "&rdquo;");
            html.push("</div>");
            html.push("</div>");
            html.push("</div>");

            var htmlCompiled = html.join(" ");
            $("#game").append(htmlCompiled);
        }
    }, {
        key: "buildGuess",
        value: function buildGuess(varmap) {
            var html = [];
            html.push("&ldquo;");

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.entry.parsed[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var token = _step4.value;

                    if ("key" in token) {
                        if (token.key != "BEGIN_LINE" && token.key != "END_LINE") {
                            html.push(token.key);
                        }
                    } else if (!("options" in token)) {
                        html.push(token.swappable);
                    } else {
                        var term = varmap[token.varName];
                        if (term === undefined) {
                            term = token.swappable;
                        }
                        html.push("<b>" + term + "</b>");
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            html.push("&rdquo;");
            var htmlCompiled = html.join(" ");

            return htmlCompiled;
        }
    }, {
        key: "updateGuess",
        value: function updateGuess() {
            var varmap = {};
            $(".select-full").each(function () {
                var varName = $(this).attr("data-varName");
                var value = $(this).val();
                varmap[varName] = value;
            });

            var htmlCompiled = this.buildGuess(varmap);

            $("#full-guess").html(htmlCompiled);
        }
    }, {
        key: "addDropdownListeners",
        value: function addDropdownListeners() {
            var THIS = this;
            $("select").change(function () {
                THIS.selectChange(this);
            });
        }
    }, {
        key: "selectChange",
        value: function selectChange(source) {
            this.updateGuess();
        }
    }, {
        key: "makeCheckboxes",
        value: function makeCheckboxes() {
            var parsed = this.entry.parsed;
            var html = [];

            html.push("<div class='section'><h2>Checkbox guesser</h2>");

            html.push("<h3>Checkbox possibilities:</h3><p id='checkbox-possibilities'></p>");

            html.push("<div class='var-header'>");

            var quote = [];
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = parsed[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var token = _step5.value;

                    if ("key" in token) {
                        if (token.key != "BEGIN_LINE" && token.key != "END_LINE") {
                            var snippet = "<p>" + token.key + "</p>";
                            quote.push(snippet);
                        }
                    } else if (!("options" in token)) {
                        var _snippet = "<p>" + token.swappable + "</p>";
                        quote.push(_snippet);
                    } else {
                        //console.log(token);
                        var options = token.options;

                        var buttons = "\n                    <p class=\"check-button-p\">\n                        <button class=\"check-button checkall\" data-varName=\"" + token.varName + "\">check all</button>\n                        <button class=\"check-button uncheckall\" data-varName=\"" + token.varName + "\">uncheck all</button>\n                    </p>\n                ";
                        quote.push(buttons);

                        var numOptions = "<p class=\"guess-checkbox\" >" + token.options.length + " possible values:</p>";
                        quote.push(numOptions);
                        //quote.push(`<select class="select-full" data-varName='${token.varName}'>`);
                        var _iteratorNormalCompletion6 = true;
                        var _didIteratorError6 = false;
                        var _iteratorError6 = undefined;

                        try {
                            for (var _iterator6 = options[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                var option = _step6.value;

                                //quote.push(`<option>${option}</option>`);
                                var name = token.varName + ":" + option;
                                var label = "<label for=\"" + name + "\">" + option + "</label><br>";
                                var _snippet2 = "<p class=\"guess-checkbox\"><input type=\"checkbox\" data-varName=\"" + token.varName + "\" data-option=\"" + option + "\" id=\"" + name + "\" value=\"" + option + "\" checked>" + label + "</p>";
                                quote.push(_snippet2);
                            }
                            //quote.push("</select>");
                        } catch (err) {
                            _didIteratorError6 = true;
                            _iteratorError6 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                    _iterator6.return();
                                }
                            } finally {
                                if (_didIteratorError6) {
                                    throw _iteratorError6;
                                }
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            var quoteCompiled = quote.join(" ");
            html.push(quoteCompiled);
            html.push("</div>");
            html.push("</div>");

            var htmlCompiled = html.join(" ");
            $("#game").append(htmlCompiled);
        }
    }, {
        key: "updateCheckboxPossibilities",
        value: function updateCheckboxPossibilities() {
            var counts = {};
            $('input[type=checkbox]').each(function () {
                if (this.checked) {
                    var varName = $(this).attr("data-varName");
                    if (!(varName in counts)) {
                        counts[varName] = 0;
                    }
                    counts[varName] += 1;
                }
            });
            //console.log(counts);

            var possibilities = 1;
            var varNames = Object.keys(counts).sort();
            var strBuilder = [];

            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = varNames[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var varName = _step7.value;

                    var _str = " " + counts[varName] + "(" + varName + ") ";
                    strBuilder.push(_str);
                    possibilities *= counts[varName];
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            var str = strBuilder.join("&times;");
            var p = str + " = " + possibilities;
            //console.log(possibilities);

            $("#checkbox-possibilities").html(p);
        }
    }, {
        key: "addCheckboxListeners",
        value: function addCheckboxListeners() {
            var THIS = this;

            $('input[type=checkbox]').change(function () {
                THIS.updateCheckboxPossibilities();
            });

            $('.checkall').click(function () {
                THIS.checkall(this);
            });

            $('.uncheckall').click(function () {
                THIS.uncheckall(this);
            });
        }
    }, {
        key: "checkall",
        value: function checkall(source) {
            var varName = $(source).attr("data-varName");
            console.log(varName);

            $("input[type=checkbox][data-varName=" + varName + "]").each(function () {
                //THIS.updateCheckboxPossibilities();
                //console.log(this);
                $(this).prop("checked", true);
            });

            this.updateCheckboxPossibilities();
        }
    }, {
        key: "uncheckall",
        value: function uncheckall(source) {
            var varName = $(source).attr("data-varName");
            console.log(varName);

            $("input[type=checkbox][data-varName=" + varName + "]").each(function () {
                //THIS.updateCheckboxPossibilities();
                //console.log(this);
                $(this).prop("checked", false);
            });

            this.updateCheckboxPossibilities();
        }
    }, {
        key: "makeGenuineCve",
        value: function makeGenuineCve() {
            var html = "<div class='section'><h2>The real " + this.entry.id + "</h2><div class='var-header'>&ldquo; " + this.entry.desc + " &rdquo;</div></div>";
            $("#game").append(html);
        }
    }, {
        key: "makeDropdownGuesser",
        value: function makeDropdownGuesser() {
            this.makeDropdowns();
            this.updateGuess();
            this.addDropdownListeners();
        }
    }, {
        key: "makeCheckboxGuesser",
        value: function makeCheckboxGuesser() {
            this.makeCheckboxes();
            this.updateCheckboxPossibilities();
            this.addCheckboxListeners();
        }
    }, {
        key: "launch",
        value: function launch() {
            if (!this.getEntry()) {
                return;
            }

            this.makeTitle();

            this.makeDropdownGuesser();
            this.makeCheckboxGuesser();
            this.makeGenuineCve();
        }
    }]);

    return CveGame;
}();

function getParams() {
    var url = window.location.href;
    var parts = url.split("?");
    var params = parts[1];
    if (params === undefined) {
        return undefined;
    }

    var _params$split = params.split("_"),
        _params$split2 = _slicedToArray(_params$split, 2),
        clusterName = _params$split2[0],
        cveId = _params$split2[1];

    if (clusterName === undefined || cveId === undefined) {
        return undefined;
    }
    return {
        clusterName: clusterName,
        cveId: cveId
    };
}

var GAME = void 0;
function run() {
    var params = getParams();
    if (params === undefined) {
        $("#game").html("Error");
        return;
    }

    GAME = new CveGame(GAMEDATA, params.clusterName, params.cveId);
    GAME.launch();
}

run();