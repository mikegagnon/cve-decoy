import sys
import json

SEP = "|---|"

class LearnModels:

    def __init__(self, data):
        self.data = data
        self.entries = data["entries"]
        self.models = {}

        clusters = data["topWords"].keys()
        for clusterName in clusters:
            self.models[clusterName] = {}
        #print(self.models)

    def learnEntry(self, entry):
        clusterName = entry["cluster"]
        parsedLine = entry["parsed"]
        before = parsedLine[0]["key"] # should be BEGIN_LINE

        currentSwappableTerm = None

        for term in parsedLine[1:]:
            # If a top word
            if "key" in term:
                if currentSwappableTerm != None:
                    after = term["key"]
                    beforeAfter = f"{before}{SEP}{after}"
                    if beforeAfter not in self.models[clusterName]:
                        self.models[clusterName][beforeAfter] = set([])
                    self.models[clusterName][beforeAfter].add(currentSwappableTerm)
                before = term["key"]
                currentSwappableTerm = None
            elif "swappable" in term:
                currentSwappableTerm = term["swappable"]
            else:
                raise ValueError()

    def run(self):
        for entry in self.entries:
            self.learnEntry(entry)
        #print("dddd", self.models)#json.dumps(self.models, sort_keys=True, indent=4))
        for clusterName, v in self.models.items():
            for beforeAfter, swappables in v.items():
                self.models[clusterName][beforeAfter] = list(swappables)
            #self.models[k] = list(v)
        self.data["models"] = self.models

        print(json.dumps(self.data, sort_keys=True, indent=4))

if __name__ == "__main__":
    data = json.loads(sys.stdin.read())
    lt = LearnModels(data)
    lt.run()
