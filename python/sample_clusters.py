import sys
import json

class SampleClusters:

    def __init__(self, data, entriesPerCluster):
        self.data = data
        self.entriesPerCluster = entriesPerCluster
        self.clusterNames = list(self.data["topWords"].keys())
        #print(self.clusterNames)
        self.entriesByClusterName = {}

        for clusterName in self.clusterNames:
            self.entriesByClusterName[clusterName] = []

        self.entries = data["entries"]

    def getNumOptions(self, entry):
        numOptions = 1
        for token in entry["parsed"]:
            if "options" in token:
                numOptions *= len(token["options"])
        return numOptions

    def groupEntries(self):
        for entry in self.entries:
            clusterName = entry["cluster"]
            numOptions = self.getNumOptions(entry)
            entry["numOptions"] = numOptions
            self.entriesByClusterName[clusterName].append(entry)

    # ascending order
    def sortEntries(self):
        for clusterName in self.clusterNames:
            entries = self.entriesByClusterName[clusterName]
            entries = sorted(entries, key=lambda x: x["numOptions"])
            self.entriesByClusterName[clusterName] = entries

    def sampleEntries(self):
        samples = {}
        for clusterName in self.clusterNames:
            sample = []

            entries = self.entriesByClusterName[clusterName]
            numEntries = len(entries)
            skipAmount = int(numEntries / self.entriesPerCluster)
            for i in range(0, self.entriesPerCluster):
                entryIndex = i * skipAmount
                entry = entries[entryIndex]
                sample.append(entry)
            samples[clusterName] = sample

        return samples

    def run(self):
        self.groupEntries()
        self.sortEntries()
        samples = self.sampleEntries()
        print(json.dumps(samples, sort_keys=True, indent=4))


def main(entriesPerCluster):
    data = json.loads(sys.stdin.read())
    m = SampleClusters(data, entriesPerCluster)
    m.run()

if __name__ == "__main__":
    entriesPerCluster = int(sys.argv[1])
    main(entriesPerCluster)