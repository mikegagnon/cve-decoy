import sys
import json

# cat rawdata/cve-2020-clustered-top-100.json | python3 parse_desc.py > rawdata/cve-2020-clustered-top-100-parsed.json

class ParseDesc:

    def __init__(self, data):
        self.entries = data["entries"]
        self.topWords = {}
        for clusterName, words in data["topWords"].items():
            self.topWords[clusterName] = set(words)

    # Returns a list of tokens.
    # Each token is of the form [marker, term]
    # If marker == "*" then term is a top word (from self.topWords), or BEGING_LINE, or END_LINE.
    # If marker == "-" then term is one or more words, as a string, that appear between two top-words
    # the first token is always ["*", "BEGIN_LINE"]
    # the last token is always ["*", "END_LINE"]
    def parseDesc(self, entry):
        clusterName = entry["cluster"]
        myTopWords = self.topWords[clusterName]

        parsedLine = [{"key" : "BEGIN_LINE"}]
        currentWordList = []

        for word in entry["desc"].split():

            if word in myTopWords:
                if len(currentWordList) > 0:
                    currentTerm = " ".join(currentWordList)
                    parsedLine.append({"swappable": currentTerm})
                currentWordList = []
                parsedLine.append({"key" : word})

            else:
                currentWordList.append(word)

        if len(currentWordList) > 0:
            currentTerm = " ".join(currentWordList)
            parsedLine.append({"swappable": currentTerm})
        parsedLine.append({"key" : "END_LINE"})
        return parsedLine

    def run(self):
        for entry in self.entries:
            parsedLine = self.parseDesc(entry)
            entry["parsed"] = parsedLine

def main():
    data = json.loads(sys.stdin.read())
    p = ParseDesc(data)
    p.run()

    print(json.dumps(data, sort_keys=True, indent=4))

if __name__ == "__main__":
    #data = json.loads(sys.stdin.read())
    main()
