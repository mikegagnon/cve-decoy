import sys
import string
import json
import random

import itertools
# We want the same shuffles everytime
random.seed(0)

from learn_models import SEP

# Used for variable names
#ALPHABET = list(string.ascii_lowercase + string.ascii_uppercase)
PAIRS = ["".join(x) for x in list(itertools.product(string.ascii_uppercase, repeat=2))]
ALPHABET = list(string.ascii_uppercase) + PAIRS

class GenMutations:

    def __init__(self, data):
        self.data = data
        self.entries = data["entries"]
        self.models = data["models"]

    def shuffleSwappable(self, enrichedLine, selectedVariables):
        varNames = set([x[0] for x in selectedVariables])
        solution = {}
        for token in enrichedLine:
            if token[0] == "+":
                marker, term, thisVarName, swappable = token
                if thisVarName in varNames:
                    #print(swappable)
                    token[3] = swappable.copy()
                    random.shuffle(token[3])
                    #if term == "attack.":
                        #print(enrichedLine)
                        #print(swappable)
                        #print(term)
                        #print(swappable.index(term))
                    solution[thisVarName] = token[3].index(term)
        return solution

    def mutateEntry(self, entry):

        clusterName = entry["cluster"]
        parsed = entry["parsed"]
        model = self.models[clusterName]

        # index into ALPHABET
        letterIndex = 0

        newLine = []

        for i, token in enumerate(parsed):
            
            if "swappable" in token:
                if letterIndex >= len(ALPHABET):
                    #print(entry["id"])
                    entryId = entry["id"]
                    raise ValueError(f"Ran out of letters for{entryId}")
                varName = ALPHABET[letterIndex]
                before = parsed[i - 1]["key"]
                after = parsed[i + 1]["key"]
                beforeAfter = f"{before}{SEP}{after}"

                if beforeAfter in model:
                    options = model[beforeAfter].copy()
                    random.shuffle(options)
                    correctOption = token["swappable"]
                    correctIndex = options.index(correctOption)
                    if len(options) > 1:
                        token["varName"] = varName
                        token["options"] = options
                        token["correctOption"] = correctIndex
                        letterIndex += 1

    def run(self):
        for entry in self.entries:
            self.mutateEntry(entry)

        print(json.dumps(self.data, sort_keys=True, indent=4))

def main():
    data = json.loads(sys.stdin.read())
    g = GenMutations(data)
    g.run()

if __name__ == "__main__":
    main()
