class CveGame {
    constructor(gameData, clusterName, cveId) {
        //console.log(clusterName, cveId);
        this.clusterName = clusterName;
        this.cveId = cveId;
        this.gameData = gameData;
    }

    getEntry() {
        if (!(this.clusterName in this.gameData)) {
            $("#game").html("Error");
            return false;
        }

        const entries = this.gameData[this.clusterName];
        this.entry = null;
        for (const entry of entries) {
            const cveId = entry.id;
            if (cveId == this.cveId) {
                this.entry = entry;
                break;
            }
        }

        if (this.entry === null) {
            $("#game").html("Error");
            return false;
        }

        return true;
    }

    makeTitle() {
        const title = this.entry.id;
        const clusterName = this.entry.cluster;
        const html = `<h1>Mutated ${title}</h1><p>From the &ldquo;${clusterName}&rdquo; cluster</p>`
        $("#game").append(html);
    }

    makeDropdowns() {
        const parsed = this.entry.parsed;
        const html = [];
        html.push("<div>");
        html.push("<h2>All the possibilities:</h2>");
        if (this.entry.numOptions == 1) {
            html.push(`<p>There is 1 possibility. My algorithm didn't generate any mutations for this CVE.</p>`);
        } else {
            html.push(`<p>There are ${this.entry.numOptions} possibilities.</p>`);
        }

        html.push("<div class='section'><h2>Dropdown guesser</h2>")
        html.push("<div class='var-header' id='full-guess'></div>");

        html.push("<div class='var-header'>");

        const quote = [];
        for (const token of parsed) {
            if ("key" in token) {
                if (token.key != "BEGIN_LINE" && token.key != "END_LINE") {
                    quote.push(token.key)
                }
            } else if (!("options" in token)) {
                quote.push(token.swappable);
            } else {
                //console.log(token);
                const options = token.options;
                quote.push(`<select class="select-full" data-varName='${token.varName}'>`);
                for (const option of options) {
                    quote.push(`<option>${option}</option>`);
                }
                quote.push("</select>");
            }
        }

        const quoteCompiled = quote.join(" ");
        html.push("&ldquo;" + quoteCompiled + "&rdquo;");
        html.push("</div>");
        html.push("</div>");
        html.push("</div>")

        const htmlCompiled = html.join(" ");
        $("#game").append(htmlCompiled)
    }

    buildGuess(varmap) {
        const html = [];
        html.push("&ldquo;");

        for (const token of this.entry.parsed) {
            if ("key" in token) {
                if (token.key != "BEGIN_LINE" && token.key != "END_LINE") {
                    html.push(token.key)
                }
            } else if (!("options" in token)) {
                html.push(token.swappable);
            } else {
                let term = varmap[token.varName];
                if (term === undefined) {
                    term = token.swappable;
                }
                html.push(`<b>${term}</b>`);
            }
        }

        html.push("&rdquo;");
        const htmlCompiled = html.join(" ");

        return htmlCompiled;
    }

    updateGuess() {
        const varmap = {};
        $(".select-full").each(function(){
            const varName = $(this).attr("data-varName");
            const value = $(this).val();
            varmap[varName] = value;
        });
 
        const htmlCompiled = this.buildGuess(varmap);

        $("#full-guess").html(htmlCompiled);
    }

    addDropdownListeners() {
        const THIS = this;
        $("select").change(function() {
            THIS.selectChange(this);
        });
    }

    selectChange(source) {
        this.updateGuess();
    }

    makeCheckboxes() {
        const parsed = this.entry.parsed;
        const html = [];

        html.push("<div class='section'><h2>Checkbox guesser</h2>")

        html.push("<h3>Checkbox possibilities:</h3><p id='checkbox-possibilities'></p>");

        html.push("<div class='var-header'>");

        const quote = [];
        for (const token of parsed) {
            if ("key" in token) {
                if (token.key != "BEGIN_LINE" && token.key != "END_LINE") {
                    const snippet = `<p>${token.key}</p>`
                    quote.push(snippet)
                }
            } else if (!("options" in token)) {
                const snippet = `<p>${token.swappable}</p>`
                quote.push(snippet)
            } else {
                //console.log(token);
                const options = token.options;
                //quote.push(`<select class="select-full" data-varName='${token.varName}'>`);
                for (const option of options) {
                    //quote.push(`<option>${option}</option>`);
                    const name = `${token.varName}:${option}`
                    const label =  `<label for="${name}">${option}</label><br>`
                    const snippet = `<p class="guess-checkbox"><input type="checkbox" data-varName="${token.varName}" data-option="${option}" id="${name}" value="${option}" checked>${label}</p>`
                    quote.push(snippet);
                }
                //quote.push("</select>");
            }
        }

        const quoteCompiled = quote.join(" ");
        html.push(quoteCompiled);
        html.push("</div>");
        html.push("</div>");

        const htmlCompiled = html.join(" ");
        $("#game").append(htmlCompiled)
    }

    updateCheckboxPossibilities() {
        const counts = {};
        $('input[type=checkbox]').each(function () {
            if (this.checked) {
                const varName = $(this).attr("data-varName");
                if (!(varName in counts)) {
                    counts[varName] = 0;
                }
                counts[varName] += 1;
            }
        });
        //console.log(counts);

        let possibilities = 1;
        for (const varName in counts) {
            possibilities *= counts[varName];
        }
        //console.log(possibilities);

        $("#checkbox-possibilities").html(possibilities);
    }

    addCheckboxListeners() {
        const THIS = this;
        $('input[type=checkbox]').change(function() {
            THIS.updateCheckboxPossibilities();
        });
    }

    makeDropdownGuesser() {
        this.makeDropdowns();
        this.updateGuess();
        this.addDropdownListeners();     
    }

    makeCheckboxGuesser() {
        this.makeCheckboxes();
        this.updateCheckboxPossibilities();
        this.addCheckboxListeners();
    }

    launch() {
        if (!this.getEntry()) {
            return;
        }
        
        this.makeTitle();

        this.makeDropdownGuesser();
        this.makeCheckboxGuesser();

        /*this.makeFullVarHeader();
        this.makeDownsampledVarHeader();
        this.makeSolution();
        this.addListeners();
        this.updateGuessDesc();*/
    }
}

function getParams() {
    const url = window.location.href;
    const parts = url.split("?");
    const params = parts[1];
    if (params === undefined) {
        return undefined
    }
    const [clusterName, cveId] = params.split("_");
    if (clusterName === undefined || cveId === undefined) {
        return undefined;
    }
    return {
        clusterName: clusterName,
        cveId: cveId
    };
}

let GAME;
function run(){
    const params = getParams();
    if (params === undefined) {
        $("#game").html("Error");
        return;
    }

    GAME = new CveGame(GAMEDATA, params.clusterName, params.cveId);
    GAME.launch();
}

run();
